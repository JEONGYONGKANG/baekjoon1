#define _CRT_SECURE_NO_WARNINGS
#define _WINSOCK_DEPRECATED_NO_WARNINGS

#include <stdio.h>
#include <winsock2.h>
#include <conio.h>

#pragma comment(lib, "wsock32.lib")
#pragma comment(lib, "ws2_32.lib")
#define BUFFER_SIZE 100

int main(void) {
    SOCKET s;
    WSADATA wsaData;
    struct sockaddr_in	sin;

    printf("[[[ Client ]]]");

    if (WSAStartup(WINSOCK_VERSION, &wsaData) != 0) {
        printf("WSAStartup 실패, 에러 코드 = %d ", WSAGetLastError());
        return 0;
    }

    s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

    if (s == INVALID_SOCKET) {
        printf("소켓 생성 실패, 에러코드 : %d ", WSAGetLastError());
        WSACleanup();
        return 0;
    }

    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = inet_addr("127.0.0.1");
    sin.sin_port = htons(10000);

    if (connect(s, (struct sockaddr*)&sin, sizeof(sin)) != 0) {
        printf("접속 실패, 에러 코드 =  %u ", WSAGetLastError());
        closesocket(s);
        WSACleanup();
        return 0;
    }

    printf("127.0.0.1의 10000번 포트에 접속을 성공하였습니다.");

    FILE* file;
    char filename[] = "C:\\Users\\yjgan\\OneDrive\\바탕 화면\\test.txt"; // 여러분의 파일 이름으로 변경하세요
    char buffer[BUFFER_SIZE];

    // 파일을 읽기 위해 파일을 엽니다.
    file = fopen(filename, "rb");
    if (file == NULL) {
        printf("파일 열기 오류: %s\n", filename);
        closesocket(s);
        WSACleanup();
        return 0;
    }

    // 서버에 파일 이름을 전송합니다.
    if (send(s, filename, strlen(filename) + 1, 0) == SOCKET_ERROR) {
        printf("파일 이름 전송 오류, 오류 코드 = %u\n", WSAGetLastError());
        closesocket(s);
        WSACleanup();
        fclose(file);
        return 0;
    }

    // 파일 내용을 읽어서 서버에 보냅니다.
    while (!feof(file)) {
        size_t bytesRead = fread(buffer, 1, sizeof(buffer), file);
        if (send(s, buffer, bytesRead, 0) == SOCKET_ERROR) {
            printf("파일 내용 전송 오류, 오류 코드 = %u\n", WSAGetLastError());
            closesocket(s);
            WSACleanup();
            fclose(file);
            return 0;
        }
    }

    fclose(file);

    printf("서버와의 접속을 종료했습니다.");

    if (closesocket(s) != 0) {
        printf("소켓 제거 실패, 에러 코드 = %u ", WSAGetLastError());
        WSACleanup();
        return 0;
    }

    if (WSACleanup() != 0) {
        printf("WSACleanup 실패, 에러 코드 = %u ", WSAGetLastError());
        return 0;
    }

    return 1;
}
