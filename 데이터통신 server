#define _CRT_SECURE_NO_WARNINGS
#include <winsock2.h>
#include <stdio.h>
#include <conio.h>

#pragma comment(lib, "wsock32.lib")
#pragma comment(lib, "ws2_32.lib")

#define BUFFER_SIZE 100


int main() {
	printf("[[[ Server ]]]\n");

	WSADATA wsdata;
	if (WSAStartup(MAKEWORD(2, 2), &wsdata) != 0) {
		printf("WS2_32.DLL을 초기화하는데 실패했습니다.\n");
		return 0;
	}
	printf("1. WS2_32.DLL을 초기화하는데 성공했습니다.\n");

	SOCKET serverSocket = socket(PF_INET, SOCK_STREAM, 0);

	SOCKADDR_IN serverAddress;
	ZeroMemory(&serverAddress, sizeof(serverAddress));
	serverAddress.sin_family = AF_INET;
	serverAddress.sin_port = htons(10000);
	serverAddress.sin_addr.s_addr = htonl(ADDR_ANY);

	if (bind(serverSocket, (SOCKADDR*)&serverAddress, sizeof(serverAddress)) == SOCKET_ERROR) {
		printf("serverSocket에 IP와 PORT를 부여하는데 실패했습니다.\n");
		return 0;
	}
	printf("2. serverSocket에 IP와 Port를 부여하는데 성공했습니다.\n");

	printf("3. 클라이언트의 접속을 기다립니다.\n");

	listen(serverSocket, SOMAXCONN);

	SOCKET socket;
	if ((socket = accept(serverSocket, NULL, NULL)) == INVALID_SOCKET) {
		printf("클라이언트와 데이터를 주고 받는 socket을 생성할 수 없습니다.\n");
		return 0;
	}
	printf("!! 클라이언트가 접속했습니다. 메시지를 기다리는 중....\n");

	char fileName[BUFFER_SIZE + 1];
	recv(socket, fileName, BUFFER_SIZE, 0);
	fileName[BUFFER_SIZE] = '\0';
	
	char buffer[BUFFER_SIZE];
	FILE* receivedFile = fopen(fileName, "wb");
	if (receivedFile == NULL) {
		printf("파일을 생성할 수 없습니다.\n");
		closesocket(socket);
		WSACleanup();
		return 0;
	}

	int totalBytesReceived = 0;
	while (1) {
		int bytesReceived = recv(socket, buffer, BUFFER_SIZE, 0);
		if (bytesReceived <= 0) {
			break;
		}

		 for (int i = 0; i < bytesReceived; ++i) {
        buffer[i] += 4;

        // 변환된 문자를 화면에 출력
        fputc(buffer[i], stdout);
    }
		fwrite(buffer, 1, bytesReceived, receivedFile);
		totalBytesReceived += bytesReceived;
	}

	fclose(receivedFile);
	printf("클라이언트로부터 %d 바이트의 파일 내용을 성공적으로 받았습니다.\n", totalBytesReceived);

	printf("파일 내용: ");

	FILE* readFile = fopen(fileName, "rb");
	if (readFile != NULL) {
		while (!feof(readFile)) {
			size_t bytesRead = fread(buffer, 1, sizeof(buffer), readFile);
			if (bytesRead > 0) {
				fwrite(buffer, 1, bytesRead, stdout);
			}
		}
		fclose(readFile);
	}

	
	

	closesocket(socket);
	printf("클라이언트와의 접속을 종료했습니다.\n");

	WSACleanup();
	printf("WS2_32.DLL의 사용을 종료합니다.\n");

	return 1;
}


